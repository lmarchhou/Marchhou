
package com.uih.uplus.solar.equipment.management.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
import com.uih.uplus.common.log.common.UPlusLevelCode;
import com.uih.uplus.common.service.impl.BaseServiceImpl;
import com.uih.uplus.solar.equipment.management.entity.Device;
import com.uih.uplus.solar.equipment.management.entity.DeviceInfo;
import com.uih.uplus.solar.equipment.management.mapper.DeviceInfoMapper;
import com.uih.uplus.solar.equipment.management.mapper.DeviceMapper;
import com.uih.uplus.solar.equipment.management.model.condition.AreaCondition;
import com.uih.uplus.solar.equipment.management.model.view.*;
import com.uih.uplus.solar.equipment.management.service.DeviceInfoService;
import com.uih.uplus.solar.equipment.management.service.DeviceService;
import com.uih.uplus.solar.equipment.shared.grpc.alert.AlertServerGrpc;
import com.uih.uplus.solar.equipment.shared.grpc.alert.DeviceIdPro;
import com.uih.uplus.solar.equipment.shared.grpc.alertservicecode.AlertServiceCodeServerGrpc;
import com.uih.uplus.solar.equipment.shared.grpc.alertservicecode.DeviceIdTypePro;
import com.uih.uplus.solar.shared.Model.AuthCustomerModel;
import com.uih.uplus.solar.shared.constant.DeviceManageCst;
import com.uih.uplus.solar.shared.utils.LogUtil;
import com.uih.uplus.solar.shared.utils.UserUtils;
import lombok.extern.uih.log.UIHLog;
import net.devh.boot.grpc.client.inject.GrpcClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import static java.util.Arrays.asList;

/**
 * <p>
 * 设备信息表 服务实现类
 * </p>
 *
 * @author ${author}
 */
@UIHLog
@Service
public class DeviceInfoServiceImpl extends BaseServiceImpl<DeviceInfo> implements DeviceInfoService {

    @Autowired
    private DeviceInfoMapper deviceInfoMapper;

    @Autowired
    private DeviceService deviceService;

    @Autowired
    private DeviceMapper deviceMapper;

    @Value("${app.logical-code}")
    private String logicalCode;

    @GrpcClient("solar-equipment-alert")
    private AlertServiceCodeServerGrpc.AlertServiceCodeServerFutureStub alertServiceCodeServerGrpc;

    @GrpcClient("solar-equipment-alert")
    private AlertServerGrpc.AlertServerFutureStub alertServerGrpc;

    @Autowired
    private UserUtils userUtils;

    @Autowired
    private CustomerUtils customerUtils;

    @Override
    public int getMonitorDeviceNum(String token, String userId, String productTypeName) {
        //从租户平台获取当前用户所在机构ID
        List<AuthCustomerModel> customers = customerUtils.authQueryByUserId(token, Long.valueOf(userId));
        if (!CollectionUtils.isEmpty(customers)) {
            List<Long> customerIds = new ArrayList<>();
            for (AuthCustomerModel customer : customers) {
                customerIds.add(customer.getOrgId());
            }
            return deviceInfoMapper.getMonitorDeviceNum(customerIds);
        }
        return 0;
    }

    @Override
    public int getMonitorDeviceNumForEngineer(String token, AreaCondition areaCondition) {
        List<Long> authCustomers = null;
        if (org.apache.commons.lang3.StringUtils.isNotBlank(token) &&
                (org.apache.commons.lang3.StringUtils.isNotBlank(areaCondition.getCountryName())
                        || org.apache.commons.lang3.StringUtils.isNotBlank(areaCondition.getProvinceName()))) {
            authCustomers = customerUtils.authQueryIdsByArea(token, areaCondition.getCountryName(), areaCondition.getProvinceName(), null, null);
            if (CollectionUtils.isEmpty(authCustomers)) return 0;
        }
        return deviceInfoMapper.getMonitorDeviceNum(authCustomers);
    }

    @Override
    @Transactional
    public boolean updateByDeviceId(DeviceInfo deviceInfo) {
        return deviceInfoMapper.updateByDeviceId(deviceInfo) > 0;
    }

    @Override
    public boolean updateIpAddressByDeviceId(DeviceInfo deviceInfo) {
        return deviceInfoMapper.update(deviceInfo, new UpdateWrapper<DeviceInfo>().lambda().eq(DeviceInfo::getDeviceId, deviceInfo.getDeviceId())) > 0;
    }

    @Override
    public boolean checkRepeatedIp(String inputIp, Long deviceId, Long vpnId) {
        return deviceInfoMapper.checkRepeatedIp(inputIp, deviceId, vpnId) > 0;
    }

    @Override
    public DeviceInfo getMonitorInfoByDeviceId(Long deviceId) {
        return deviceInfoMapper.selectOne(new QueryWrapper<DeviceInfo>().lambda().eq(DeviceInfo::getDeviceId, deviceId));
    }

    @Override
    public boolean updateMonitorInfoByDeviceId(DeviceInfo deviceInfo) {
        Device device = deviceService.getOne(new QueryWrapper<Device>().eq("ID", deviceInfo.getDeviceId()));
        device.setVersion(deviceInfo.getVersion());
        deviceMapper.updateById(device);
        return deviceInfoMapper.update(deviceInfo, new UpdateWrapper<DeviceInfo>().lambda().eq(DeviceInfo::getDeviceId, deviceInfo.getDeviceId())) > 0;
    }

    @Override
    public void setServiceCode(Long deviceId) {
        try {
            String systemType = deviceInfoMapper.getSystemType(deviceId);
            String[] systemTypes = new String[]{"M0", "M1", "M2", "Liuhe", "M3"};
            if (asList(systemTypes).contains(systemType)) {
                DeviceIdTypePro deviceIdTypePro = DeviceIdTypePro.newBuilder()
                        .setDeviceId(deviceId)
                        .setSystemType(systemType)
                        .build();
                logger.log(LogUtil.createLogUid(UPlusLevelCode.LOG_DEV_INFO, logicalCode, 0), "【setServiceCode】,deviceId={},systemType={}", deviceId, systemType);
                alertServiceCodeServerGrpc.setAlertServiceCode(deviceIdTypePro);
            }
        } catch (Exception ex) {
            logger.log(LogUtil.createLogUid(UPlusLevelCode.LOG_DEV_ERROR, logicalCode, 0x000000a7), "ServiceCode{}: ServiceCode初始化失败", ex);
        }
    }

    @Override
    public List<DeviceIncreaseModel> getDeviceIncrease(Date startDate, Date endDate) {
        return deviceInfoMapper.getDeviceIncrease(startDate, endDate);
    }

    @Override
    public void deleteAlertInfo(Long deviceId) {
        try {
            DeviceIdPro deviceIdPro = DeviceIdPro.newBuilder().setDeviceId(deviceId).build();
            logger.log(LogUtil.createLogUid(UPlusLevelCode.LOG_DEV_INFO, logicalCode, 0), "调用【alertServerGrpc】删除设备告警信息, deviceId={}", deviceId);
            alertServerGrpc.deleteAlertInfo(deviceIdPro);
        } catch (Exception ex) {
            logger.log(LogUtil.createLogUid(UPlusLevelCode.LOG_DEV_ERROR, logicalCode, 0x000000a8),  "删除设备告警信息异常 error: {}", ex);
        }
    }

    @Override
    public DeviceOverviewInfoModel getDeviceOverviewInfoForEngineer(String token, AreaCondition areaCondition) {
        int onlineDeviceNum = 0;
        int offlineDeviceNum = 0;
        int deviceNum = 0;
        List<DeviceTypeDistributeModel> deviceTypeDistribute = new ArrayList<>();
        for(String product:DeviceManageCst.productTypeList){
            deviceTypeDistribute.add(new DeviceTypeDistributeModel(product,0,0));
        }

        List<Long> authCustomers = null;
        if (org.apache.commons.lang3.StringUtils.isNotBlank(areaCondition.getCountryName()) || org.apache.commons.lang3.StringUtils.isNotBlank(areaCondition.getProvinceName())) {
            authCustomers = customerUtils.authQueryIdsByArea(token, areaCondition.getCountryName(), areaCondition.getProvinceName(), null, null);
            if (!CollectionUtils.isEmpty(authCustomers)) {
                onlineDeviceNum = deviceInfoMapper.getOnlineDeviceNum(authCustomers);
                offlineDeviceNum = deviceInfoMapper.getOfflineDeviceNum(authCustomers);
                deviceNum = onlineDeviceNum + offlineDeviceNum;
                deviceTypeDistribute = deviceMapper.queryDeviceTypeDistribute(authCustomers, DeviceManageCst.productTypeList);
            }
        }
        DeviceOverviewInfoModel deviceOverviewInfoModel = new DeviceOverviewInfoModel();
        deviceOverviewInfoModel.setOnlineDeviceNum(onlineDeviceNum);
        deviceOverviewInfoModel.setOfflineDeviceNum(offlineDeviceNum);
        deviceOverviewInfoModel.setDeviceNum(deviceNum);
        deviceOverviewInfoModel.setDeviceTypeDistribute(deviceTypeDistribute);
        return deviceOverviewInfoModel;
    }

    @Override
    public PercentageStatisticsModel getDeviceOnlinePercentageForEngineer() {
        //总在线比
        int onLineNum = deviceInfoMapper.getOnlineDeviceNum(null);
        int monitorDeviceNum = deviceInfoMapper.getMonitorDeviceNum(null);
        float totalOnLinePercentage = (onLineNum == 0 || monitorDeviceNum == 0) ? 0F:(float)onLineNum / monitorDeviceNum;
        //不同产品类型在线比
        List<DeviceOnLinePercentageModel> productOnLinePercentage = new ArrayList<>();
        for (String product : DeviceManageCst.productTypeList) {
            DeviceOnLinePercentageModel deviceOnLinePercentageModel = new DeviceOnLinePercentageModel(product, 0);
            deviceOnLinePercentageModel.setProductTypeName(product);
            int productOnLineNum =  deviceInfoMapper.queryDeviceOnLineByProductTypeId(null, product);
            int productSum = deviceInfoMapper.queryDeviceSumByProductTypeId(null, product);
            float productPercentage = productOnLineNum == 0 || productSum == 0 ? 0F:(float)productOnLineNum / productSum;
            deviceOnLinePercentageModel.setPercentage(productPercentage);
            productOnLinePercentage.add(deviceOnLinePercentageModel);
        }
        PercentageStatisticsModel percentageStatistics = new PercentageStatisticsModel();
        percentageStatistics.setTotalOnLinePercentage(totalOnLinePercentage);
        percentageStatistics.setProductOnLinePercentage(productOnLinePercentage);
        return percentageStatistics;
    }

    @Override
    public PercentageStatisticsModel getDeviceOnlinePercentage(String token, String userId) {
        float totalOnLinePercentage = 0F;
        List<DeviceOnLinePercentageModel> productOnLinePercentage = new ArrayList<>();
        for (String product : DeviceManageCst.productTypeListForCustomer) {
            if("MI".equals(product)) product = "PET-CT";
            if("PMR".equals(product)) product = "PET-MR";
            if("WS".equals(product)) product = "AWS";
            productOnLinePercentage.add(new DeviceOnLinePercentageModel(product, 0));
        }
        List<AuthCustomerModel> customers = customerUtils.authQueryByUserId(token, Long.valueOf(userId));
        if (!CollectionUtils.isEmpty(customers)) {
            List<Long> customerIds = new ArrayList<>();
            for (AuthCustomerModel customer : customers) {
                customerIds.add(customer.getOrgId());
            }
            int onLineNum = deviceInfoMapper.getOnlineDeviceNum(customerIds);
            int monitorDeviceNum = deviceInfoMapper.getMonitorDeviceNum(customerIds);
            totalOnLinePercentage = (onLineNum == 0 || monitorDeviceNum == 0) ? 0F:(float)onLineNum / monitorDeviceNum;

            productOnLinePercentage = new ArrayList<>();
            for(String product : DeviceManageCst.productTypeListForCustomer){
                int productOnLineNum = deviceInfoMapper.queryDeviceOnLineByProductTypeId(customerIds, product);
                int productSum = deviceInfoMapper.queryDeviceSumByProductTypeId(customerIds, product);
                float productPercentage = (productOnLineNum == 0 || productSum == 0) ? 0F:(float)productOnLineNum / productSum;
                if("MI".equals(product)) product = "PET-CT";
                if("PMR".equals(product)) product = "PET-MR";
                if("WS".equals(product)) product = "AWS";
                DeviceOnLinePercentageModel deviceOnLinePercentageModel = new DeviceOnLinePercentageModel(product,0);
                deviceOnLinePercentageModel.setProductTypeName(product);
                deviceOnLinePercentageModel.setPercentage(productPercentage);
                productOnLinePercentage.add(deviceOnLinePercentageModel);
            }
        }
        PercentageStatisticsModel percentageStatistics = new PercentageStatisticsModel();
        percentageStatistics.setProductOnLinePercentage(productOnLinePercentage);
        percentageStatistics.setTotalOnLinePercentage(totalOnLinePercentage);
        return percentageStatistics;
    }

    @Override
    public DeviceOverviewMonitorModel getDeviceOverviewMonitor(String token, String userId) {
        DeviceOverviewMonitorModel deviceOverviewMonitorModel = new DeviceOverviewMonitorModel(0,0,0F,0F);
        List<AuthCustomerModel> customers = customerUtils.authQueryByUserId(token, Long.valueOf(userId));
        if (!CollectionUtils.isEmpty(customers)) {
            List<Long> customerIds = new ArrayList<>();
            for (AuthCustomerModel customer : customers) {
                customerIds.add(customer.getOrgId());
            }
            int onlineDeviceNum = deviceInfoMapper.getOnlineDeviceNum(customerIds);
            int offlineDeviceNum = deviceInfoMapper.getOfflineDeviceNum(customerIds);
            int deviceNum = onlineDeviceNum + offlineDeviceNum;
            float onlinePercentage = deviceNum == 0 ? 0F : (float) onlineDeviceNum / deviceNum;
            float offlinePercentage = deviceNum == 0 ? 0F : (float) offlineDeviceNum / deviceNum;
            deviceOverviewMonitorModel.setOnlineDeviceNum(onlineDeviceNum);
            deviceOverviewMonitorModel.setOfflineDeviceNum(offlineDeviceNum);
            deviceOverviewMonitorModel.setOnlinePercentage(onlinePercentage);
            deviceOverviewMonitorModel.setOfflinePercentage(offlinePercentage);
        }
        return deviceOverviewMonitorModel;
    }
}
