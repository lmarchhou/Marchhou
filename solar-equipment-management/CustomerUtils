package com.uih.uplus.solar.equipment.management.service.impl;

import com.uih.uplus.solar.equipment.management.model.response.Paging;
import com.uih.uplus.solar.shared.Model.AreaModel;
import com.uih.uplus.solar.shared.Model.AuthCustomerModel;
import com.uih.uplus.solar.shared.Model.ResponseModel;
import com.uih.uplus.solar.shared.constant.LogCst;
import lombok.extern.uih.log.UIHLog;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.stereotype.Component;
import org.springframework.util.MultiValueMap;
import org.springframework.util.StringUtils;
import org.springframework.web.client.RestTemplate;

import java.util.*;

/**
 * @ClassName CustomerUtils
 * @Description CustomerUtils
 * @Author zhou.yang
 * @Date 2020/7/1 11:05
 */
@UIHLog
@Component
public class CustomerUtils {
    @Value("${api.uapApiUrl:http}")
    private String uapApiUrl;

    private String authCustomerByIdsPath = "/organization/id";

    private String authCustomerListPath = "/organization/id/name";

    private String authCustomerByArea = "/organization/area";

    private String authCustomerByUserId = "/organization/user";

    private String authCountry = "/address/country";

    private String authProvince = "/address/province";

    private String authCity = "/address/city";

    private String authDistrict = "/address/district";

    @Autowired
    private RestTemplate restTemplate;

    private String authorization = "Authorization";

    /**
     * 根据IDs从租户平台批量获取客户信息
     * @param ids 客户ID集合
     * @return 客户信息列表
     */
    public List<AuthCustomerModel> authQueryByIds(List<Long> ids){
        ParameterizedTypeReference<ResponseModel<ArrayList<AuthCustomerModel>>> typeRef = new ParameterizedTypeReference<ResponseModel<ArrayList<AuthCustomerModel>>>(){};
        HttpEntity<List<Long>> httpEntity = new HttpEntity<>(ids);
        try{
            ResponseModel<ArrayList<AuthCustomerModel>> responseModel = restTemplate.exchange(uapApiUrl+authCustomerByIdsPath, HttpMethod.POST,httpEntity,typeRef).getBody();
            return responseModel.getData();
        }catch (Exception e){
            logger.log(LogCst.MANAGEMENT_DEV_INFO,"根据IDs从租户平台批量获取客户信息异常",e);
            return new ArrayList<>();
        }
    }

    /**
     * 从租户平台查询机构列表
     * @param token token
     * @param name 查询条件
     * @return 客户信息列表
     */
    public List<AuthCustomerModel> authQueryList(String token, String name) {
        HttpHeaders headers = new HttpHeaders();
        headers.set(authorization, token);
        String params;
        if (StringUtils.isEmpty(name)) {
            params = "?pageSize=20&pageNum=1";
        } else {
            params = "?pageSize=20&pageNum=1&nameLike=" + name;
        }

        return sendQuery(headers, params);
    }

    /**
     * 从租户平台查询机构名称
     *
     * @param token token
     * @param key   机构id
     * @return 客户名称
     */
    public List<AuthCustomerModel> authQueryCustomer(String token, String key) {
        HttpHeaders headers = new HttpHeaders();
        headers.set(authorization, token);

        String params = "?pageSize=20&pageNum=1&orgId=" + key;

        return sendQuery(headers, params);
    }

    /**
     * 发请求给租户平台
     *
     * @param headers 请求参数
     * @return list
     */
    private List<AuthCustomerModel> sendQuery(HttpHeaders headers, String params) {
        HttpEntity<HttpHeaders> httpEntity = new HttpEntity<>(headers);
        ParameterizedTypeReference<ResponseModel<Paging<AuthCustomerModel>>> typeRef =
                new ParameterizedTypeReference<ResponseModel<Paging<AuthCustomerModel>>>() {
                };
        try {
            ResponseModel<Paging<AuthCustomerModel>> responseModel = restTemplate
                    .exchange(uapApiUrl + authCustomerListPath + params, HttpMethod.GET, httpEntity, typeRef).getBody();
            if (null == responseModel) {
                return Collections.emptyList();
            }
            return (List<AuthCustomerModel>) responseModel.getData().getData();
        } catch (Exception e) {
            logger.log(LogCst.MANAGEMENT_DEV_INFO, "从租户平台查询机构列表异常", e);
            return new ArrayList<>();
        }
    }

    /**
     * 根据国家省市区名称从租户平台获取客户Ids
     * @param token token
     * @param countryName 国家名称
     * @param provinceName 省份名称
     * @param cityName 市名称
     * @param districtName 区/县名称
     * @return 客户ID集合
     */
    public List<Long> authQueryIdsByArea(String token,String countryName ,String provinceName, String cityName ,String districtName){
        ParameterizedTypeReference<ResponseModel<ArrayList<Long>>> typeRef = new ParameterizedTypeReference<ResponseModel<ArrayList<Long>>>(){};
        HashMap<String, String> params= new HashMap<>();
        params.put("country",countryName);
        params.put("province",provinceName);
        params.put("city",cityName);
        params.put("district",districtName);
        HttpHeaders headers = new HttpHeaders();
        headers.set(authorization,token);
        HttpEntity<HashMap<String, String>> httpEntity = new HttpEntity<>(params,headers);
        try{
            ResponseModel<ArrayList<Long>> responseModel = restTemplate.exchange(uapApiUrl + authCustomerByArea, HttpMethod.POST, httpEntity, typeRef).getBody();
            return responseModel.getData();
        }catch (Exception e){
            logger.log(LogCst.MANAGEMENT_DEV_INFO,"根据国家省市区名称从租户平台获取客户Ids异常",e);
            return new ArrayList<>();
        }
    }

    /**
     * 根据用户ID获取所在机构信息
     * @param token token
     * @param userId 用户ID
     * @return 机构信息
     */
    public List<AuthCustomerModel> authQueryByUserId(String token,Long userId){
        ParameterizedTypeReference<ResponseModel<ArrayList<AuthCustomerModel>>> typeRef = new ParameterizedTypeReference<ResponseModel<ArrayList<AuthCustomerModel>>>(){};
        Map<String, Long> params= new HashMap<>();
        params.put("accountId",userId);
        HttpHeaders headers = new HttpHeaders();
        headers.set(authorization,token);
        HttpEntity<Map<String, Long>> httpEntity = new HttpEntity<>(headers);
        try{
            ResponseModel<ArrayList<AuthCustomerModel>> responseModel = restTemplate.exchange(uapApiUrl + authCustomerByUserId+"?accountId={accountId}", HttpMethod.GET, httpEntity, typeRef,params).getBody();
            return responseModel.getData();
        }catch (Exception e){
            logger.log(LogCst.MANAGEMENT_DEV_INFO,"根据用户ID获取所在机构信息异常",e);
            return new ArrayList<>();
        }
    }

    /**
     * 获取国家列表
     * @param token token
     * @return 国家列表
     */
    public List<AreaModel> authQueryCountrys(String token){
        ParameterizedTypeReference<ResponseModel<ArrayList<AreaModel>>> typeRef = new ParameterizedTypeReference<ResponseModel<ArrayList<AreaModel>>>(){};
        HttpHeaders headers = new HttpHeaders();
        headers.set(authorization,token);
        HttpEntity<HttpHeaders> httpEntity = new HttpEntity<>(headers);
        try{
            ResponseModel<ArrayList<AreaModel>> responseModel = restTemplate.exchange(uapApiUrl + authCountry, HttpMethod.GET, httpEntity, typeRef).getBody();
            return responseModel.getData();
        }catch (Exception e){
            logger.log(LogCst.MANAGEMENT_DEV_INFO,"获取国家列表异常",e);
            return new ArrayList<>();
        }
    }

    /**
     * 获取省份列表
     * @param token token
     * @param countryId 国家ID
     * @return 省份列表
     */
    public List<AreaModel> authQueryProvinces(String token,Long countryId){
        ParameterizedTypeReference<ResponseModel<ArrayList<AreaModel>>> typeRef = new ParameterizedTypeReference<ResponseModel<ArrayList<AreaModel>>>(){};
        Map<String, Long> params= new HashMap<>();
        params.put("countryId",countryId);
        HttpHeaders headers = new HttpHeaders();
        headers.set(authorization,token);
        HttpEntity<MultiValueMap<String, Long>> httpEntity = new HttpEntity<>(headers);
        try{
            ResponseModel<ArrayList<AreaModel>> responseModel = restTemplate.exchange(uapApiUrl + authProvince+"?countryId={countryId}", HttpMethod.GET, httpEntity, typeRef,params).getBody();
            return responseModel.getData();
        }catch (Exception e){
            logger.log(LogCst.MANAGEMENT_DEV_INFO,"获取省份列表异常",e);
            return new ArrayList<>();
        }
    }

    /**
     * 获取城市列表
     * @param token token
     * @param provinceId 省份ID
     * @return 城市列表
     */
    public List<AreaModel> authQueryCitys(String token,Long provinceId){
        ParameterizedTypeReference<ResponseModel<ArrayList<AreaModel>>> typeRef = new ParameterizedTypeReference<ResponseModel<ArrayList<AreaModel>>>(){};
        Map<String, Long> params= new HashMap<>();
        params.put("provinceId",provinceId);
        HttpHeaders headers = new HttpHeaders();
        headers.set(authorization, token);
        HttpEntity<MultiValueMap<String, Long>> httpEntity = new HttpEntity<>(headers);
        try{
            ResponseModel<ArrayList<AreaModel>> responseModel = restTemplate.exchange(uapApiUrl + authCity+"?provinceId={provinceId}", HttpMethod.GET, httpEntity, typeRef,params).getBody();
            return responseModel.getData();
        }catch (Exception e){
            logger.log(LogCst.MANAGEMENT_DEV_INFO,"获取城市列表异常",e);
            return new ArrayList<>();
        }
    }

    /**
     * 获取区/县列表
     * @param token token
     * @param cityId 城市ID
     * @return 区/县列表
     */
    public List<AreaModel> authQueryDistricts(String token,Long cityId){
        ParameterizedTypeReference<ResponseModel<ArrayList<AreaModel>>> typeRef = new ParameterizedTypeReference<ResponseModel<ArrayList<AreaModel>>>(){};
        Map<String, Long> params= new HashMap<>();
        params.put("cityId",cityId);
        HttpHeaders headers = new HttpHeaders();
        headers.set(authorization, token);
        HttpEntity<MultiValueMap<String, Long>> httpEntity = new HttpEntity<>(headers);
        try{
            ResponseModel<ArrayList<AreaModel>> responseModel = restTemplate.exchange(uapApiUrl + authDistrict+"?cityId={cityId}", HttpMethod.GET, httpEntity, typeRef,params).getBody();
            return responseModel.getData();
        }catch (Exception e){
            logger.log(LogCst.MANAGEMENT_DEV_INFO,"获取区/县列表异常",e);
            return new ArrayList<>();
        }
    }
}
