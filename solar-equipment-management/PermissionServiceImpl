package com.uih.uplus.solar.equipment.management.service.impl;

import cn.hutool.core.map.MapUtil;
import cn.hutool.http.HttpUtil;
import com.uih.uplus.auth.validator.utils.AuthTokenHolder;
import com.uih.uplus.common.log.common.UPlusLevelCode;
import com.uih.uplus.solar.equipment.management.model.view.RolePermissionModel;
import com.uih.uplus.solar.equipment.management.service.PermissionService;
import com.uih.uplus.solar.shared.Model.ResponseModel;
import com.uih.uplus.solar.shared.constant.RedisConst;
import com.uih.uplus.solar.shared.enums.LogCode;
import com.uih.uplus.solar.shared.enums.ResponseCodeEnum;
import com.uih.uplus.solar.shared.utils.JsonUtils;
import com.uih.uplus.solar.shared.utils.LogUtil;
import lombok.extern.uih.log.UIHLog;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

/**
 * @author zhou.yang
 * @ClassName: PermissionServiceImpl
 * @Description: 权限接口
 * @date 2020/3/18
 */
@UIHLog
@Service
public class PermissionServiceImpl implements PermissionService {

    @Autowired
    private StringRedisTemplate stringRedisTemplate;

    @Autowired
    private AuthTokenHolder tokenHolder;

    @Value("${api.uapApiUrl}")
    private String uapApiUrl;

    private String permissionApiPath = "/permission/codes";

    private String roleApiPath = "/permission/role/codes";

    private String permissionApiPathMobile = "/permission/user/clients/codes";

    private String roleApiPathMobile = "/permission/role/user/clients/codes";

    private Long redisTimeoutMinutes = 5L;

    private String authSuccessCode = "U000000";

    private String clientId = "solar-web";

    @Value("${app.logical-code}")
    private String logicalCode;

    @Override
    public ResponseModel<RolePermissionModel> getRoleAndPermission(String userId, String appId){
                RolePermissionModel model = new RolePermissionModel();
                Map<String, Object> paramMap = new HashMap<>();
                paramMap.put("appId", appId);
                paramMap.put("userId", userId);
                //增加缓存
                String rolesStr = stringRedisTemplate.opsForValue().get(RedisConst.USER_ROLE + userId );
                if(StringUtils.isBlank(rolesStr)){
                    String roleResult = HttpUtil.get(uapApiUrl + roleApiPath, paramMap);
                    ResponseModel<ArrayList<String>> roleModel = JsonUtils.deserialize(roleResult, ResponseModel.class);
                    if(!roleModel.getCode().equals(authSuccessCode)){
                        logger.log(LogUtil.createLogUid(UPlusLevelCode.LOG_SVC_ERROR, logicalCode, LogCode.USER_ROLE_ERROR.getCode()),LogCode.USER_ROLE_ERROR.getDescription());
                        return new ResponseModel<>(ResponseCodeEnum.FAILED);
                    }
                    if(roleModel.getData().isEmpty()){
                        logger.log(LogUtil.createLogUid(UPlusLevelCode.LOG_SVC_ERROR, logicalCode, LogCode.NO_ACCESS_ROLE.getCode()),LogCode.NO_ACCESS_ROLE.getDescription());
                        return new ResponseModel<>(ResponseCodeEnum.PERMISSION_FAILED);
                    }
                    rolesStr =  JsonUtils.serialize(roleModel.getData());
                    stringRedisTemplate.opsForValue().set(RedisConst.USER_ROLE + userId , rolesStr ,redisTimeoutMinutes, TimeUnit.MINUTES);
                }

                String permissionsStr = stringRedisTemplate.opsForValue().get(RedisConst.USER_PERMISSION + userId );
                if(StringUtils.isBlank(permissionsStr)){
                    String permissionResult = HttpUtil.get(uapApiUrl + permissionApiPath, paramMap);
                    ResponseModel<ArrayList<String>> permissionModel = JsonUtils.deserialize(permissionResult, ResponseModel.class);
                    if(!permissionModel.getCode().equals(authSuccessCode)){
                        logger.log(LogUtil.createLogUid(UPlusLevelCode.LOG_SVC_ERROR, logicalCode, LogCode.USER_PERMISSION_ERROR.getCode()),LogCode.USER_PERMISSION_ERROR.getDescription());
                        return new ResponseModel<>(ResponseCodeEnum.FAILED);
                    }
                    if(permissionModel.getData().isEmpty()){
                        logger.log(LogUtil.createLogUid(UPlusLevelCode.LOG_SVC_ERROR, logicalCode, LogCode.NO_ACCESS_PERMISSION.getCode()),LogCode.NO_ACCESS_PERMISSION.getDescription());
                        return new ResponseModel<>(ResponseCodeEnum.PERMISSION_FAILED);
                    }
                    permissionsStr = JsonUtils.serialize(permissionModel.getData());
                    stringRedisTemplate.opsForValue().set(RedisConst.USER_PERMISSION + userId , permissionsStr,redisTimeoutMinutes,TimeUnit.MINUTES);
                }
                model.setRoles(JsonUtils.deserializeList(rolesStr,String.class));
                model.setPermissions(JsonUtils.deserializeList(permissionsStr,String.class));
                return new ResponseModel<>(model);
        }

    @Override
    public ResponseModel<RolePermissionModel> getRoleAndPermissionMobile(String userId,String token){
        RolePermissionModel model = new RolePermissionModel();
        Map<String, Object> paramMap = new HashMap<>();
        paramMap.put("clientId", clientId);
        paramMap.put("userId", userId);
        HashMap<String, String> headers = MapUtil.newHashMap();
        headers.put("Authorization",token);
        //增加缓存
        String rolesStr = stringRedisTemplate.opsForValue().get(RedisConst.USER_ROLE + userId );
        if(StringUtils.isBlank(rolesStr)){
            String roleResult = HttpUtil.createGet(uapApiUrl + roleApiPathMobile).form(paramMap).addHeaders(headers).execute().body();
            ResponseModel<ArrayList<String>> roleModel = JsonUtils.deserialize(roleResult, ResponseModel.class);
            if(!roleModel.getCode().equals(authSuccessCode)){
                logger.log(LogUtil.createLogUid(UPlusLevelCode.LOG_SVC_ERROR, logicalCode, LogCode.USER_ROLE_ERROR.getCode()),LogCode.USER_ROLE_ERROR.getDescription());
                return new ResponseModel<>(ResponseCodeEnum.FAILED);
            }
            if(roleModel.getData().isEmpty()){
                logger.log(LogUtil.createLogUid(UPlusLevelCode.LOG_SVC_ERROR, logicalCode, LogCode.NO_ACCESS_ROLE.getCode()),LogCode.NO_ACCESS_ROLE.getDescription());
                return new ResponseModel<>(ResponseCodeEnum.PERMISSION_FAILED);
            }
            rolesStr =  JsonUtils.serialize(roleModel.getData());
            stringRedisTemplate.opsForValue().set(RedisConst.USER_ROLE + userId , rolesStr ,redisTimeoutMinutes, TimeUnit.MINUTES);
        }

        String permissionsStr = stringRedisTemplate.opsForValue().get(RedisConst.USER_PERMISSION + userId );
        if(StringUtils.isBlank(permissionsStr)){
            String permissionResult = HttpUtil.createGet(uapApiUrl + permissionApiPathMobile).form(paramMap).addHeaders(headers).execute().body();
            ResponseModel<ArrayList<String>> permissionModel = JsonUtils.deserialize(permissionResult, ResponseModel.class);
            if(!permissionModel.getCode().equals(authSuccessCode)){
                logger.log(LogUtil.createLogUid(UPlusLevelCode.LOG_SVC_ERROR, logicalCode, LogCode.USER_PERMISSION_ERROR.getCode()),LogCode.USER_PERMISSION_ERROR.getDescription());
                return new ResponseModel<>(ResponseCodeEnum.FAILED);
            }
            if(permissionModel.getData().isEmpty()){
                logger.log(LogUtil.createLogUid(UPlusLevelCode.LOG_SVC_ERROR, logicalCode, LogCode.NO_ACCESS_PERMISSION.getCode()),LogCode.NO_ACCESS_PERMISSION.getDescription());
                return new ResponseModel<>(ResponseCodeEnum.PERMISSION_FAILED);
            }
            permissionsStr = JsonUtils.serialize(permissionModel.getData());
            stringRedisTemplate.opsForValue().set(RedisConst.USER_PERMISSION + userId , permissionsStr,redisTimeoutMinutes,TimeUnit.MINUTES);
        }
        model.setRoles(JsonUtils.deserializeList(rolesStr,String.class));
        model.setPermissions(JsonUtils.deserializeList(permissionsStr,String.class));
        return new ResponseModel<>(model);
    }

}
