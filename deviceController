package com.uih.uplus.solar.equipment.management.controller.v1;

import com.baomidou.mybatisplus.core.metadata.IPage;
import com.uih.uplus.auth.validator.domain.AuthToken;
import com.uih.uplus.auth.validator.utils.AuthTokenHolder;
import com.uih.uplus.common.controller.BaseController;
import com.uih.uplus.common.model.PageParam;
import com.uih.uplus.common.model.Paging;
import com.uih.uplus.solar.equipment.management.model.condition.AreaCondition;
import com.uih.uplus.solar.equipment.management.model.condition.DeviceMonitorQueryCondition;
import com.uih.uplus.solar.equipment.management.model.condition.DeviceQueryCondition;
import com.uih.uplus.solar.equipment.management.model.modify.DeviceModify;
import com.uih.uplus.solar.equipment.management.model.view.*;
import com.uih.uplus.solar.equipment.management.service.DeviceInfoService;
import com.uih.uplus.solar.equipment.management.service.DevicePeriodStatusService;
import com.uih.uplus.solar.equipment.management.service.DeviceService;
import com.uih.uplus.solar.equipment.management.service.DeviceStoreService;
import com.uih.uplus.solar.shared.Model.ResponseModel;
import com.uih.uplus.solar.shared.constant.LogCst;
import com.uih.uplus.solar.shared.enums.ResponseCodeEnum;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import lombok.extern.uih.log.UIHLog;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.MediaType;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * <p>
 * 设备基本表 前端控制器
 * </p>
 *
 * @author ${author}
 */
@UIHLog
@Api(tags = {"Device"}, description = "设备基本表相关接口")
@RestController
@RequestMapping(value = "/v1/devices", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
@Validated
public class DeviceController extends BaseController {
    @Autowired
    private DeviceService deviceService;
    @Autowired
    private DeviceInfoService deviceInfoService;
    @Autowired
    private DevicePeriodStatusService devicePeriodStatusService;
    @Autowired
    private DeviceStoreService deviceStoreService;
    @Autowired
    private AuthTokenHolder tokenHolder;

    @ApiOperation(value = "get device info by id")
    @GetMapping("/{id}")
    public ResponseModel<DeviceModify> getById(@ApiParam("device id") @PathVariable Long id) {
        DeviceModify deviceModify = deviceService.getById(id);
        return new ResponseModel<>(deviceModify);
    }

    @ApiOperation(value = "客户角色的装机列表")
    @GetMapping("/query-device-other-list")
    public ResponseModel<Paging<DeviceModelView>> queryDeviceOtherList(@ApiParam("deviceCondition") DeviceQueryCondition queryCondition, @ApiParam("pageParam") PageParam pageParam) {
        try {
            AuthToken token = tokenHolder.getToken();
            String jwtStr = token.jwtString;
            String userId =  token.getUserId();

            Paging<DeviceModelView> paging = deviceService.queryForPageList("Bearer " + jwtStr, userId, pageParam, queryCondition);
            return new ResponseModel<>(paging);
        } catch (Exception e) {
            logger.log(LogCst.MANAGEMENT_DEV_INFO, "获取装机列表异常", e);
            return new ResponseModel<>(ResponseCodeEnum.FAILED);
        }
    }

    @ApiOperation(value = "query related device by customerId")
    @GetMapping("/query-relate-device/")
    public ResponseModel<List<KeyValueModel>> queryRelateDevice(Long customerId) {
        List<KeyValueModel> list = deviceService.queryRelateDevice(customerId);
        return new ResponseModel<>(list);
    }

    @ApiOperation(value = "客户看板-根据产品类型和品牌统计")
    @GetMapping("/query-device-brand-distribute/")
    public ResponseModel<List<DeviceBrandDistributeModel>> queryDeviceBrandDistribute() {
        try {
            AuthToken token = tokenHolder.getToken();
            String jwtStr = token.jwtString;
            String userId = token.getUserId();

            List<DeviceBrandDistributeModel> deviceBrandDistributeModelList = deviceService.queryDeviceBrandDistribute("Bearer " + jwtStr, userId);
            return new ResponseModel<>(deviceBrandDistributeModelList);
        } catch (Exception e) {
            logger.log(LogCst.MANAGEMENT_DEV_INFO, "获取客户看板-根据产品类型和品牌统计异常", e);
            return new ResponseModel<>(ResponseCodeEnum.FAILED);
        }
    }

    @ApiOperation(value = "工程师-看板-根据产品类型和品牌统计")
    @GetMapping("/query-device-brand-distribute-for-engineer/")
    public ResponseModel<List<DeviceBrandDistributeForEngineerModel>> queryDeviceBrandDistributeForEngineer(){
        List<DeviceBrandDistributeForEngineerModel> deviceBrandDistributeForEngineerModelList = deviceService.queryDeviceBrandDistributeForEngineer();
        return new ResponseModel<>(deviceBrandDistributeForEngineerModelList);
    }

    @ApiOperation(value = "客户-看板-根据产品类型统计")
    @GetMapping("/query-device-type-distribute/")
    public ResponseModel<List<DeviceTypeDistributeModel>> queryDeviceTypeDistribute() {
        try {
            AuthToken token = tokenHolder.getToken();
            String jwtStr = token.jwtString;
            String userId = token.getUserId();

            List<DeviceTypeDistributeModel> deviceTypeDistributeModelList = deviceService.queryDeviceTypeDistribute("Bearer " + jwtStr, userId);
            return new ResponseModel<>(deviceTypeDistributeModelList);
        } catch (Exception e) {
            logger.log(LogCst.MANAGEMENT_DEV_INFO, "获取客户-看板-根据产品类型统计异常", e);
            return new ResponseModel<>(ResponseCodeEnum.FAILED);
        }
    }

    @ApiOperation(value = "工程师-看板-根据产品类型统计")
    @GetMapping("/query-device-type-distribute-for-engineer/")
    public ResponseModel<List<DeviceTypeDistributeModel>> queryDeviceTypeDistributeForEngineer(@ApiParam("areaCondition") AreaCondition areaCondition){
        try {
            AuthToken token = tokenHolder.getToken();
            String jwtStr = token.jwtString;
            List<DeviceTypeDistributeModel> deviceTypeDistributeModelList = deviceService.queryDeviceTypeDistributeForEngineer("Bearer " + jwtStr,areaCondition);
            return new ResponseModel<>(deviceTypeDistributeModelList);
        } catch (Exception e) {
            logger.log(LogCst.MANAGEMENT_DEV_INFO, "获取工程师-看板-根据产品类型统计异常", e);
            return new ResponseModel<>(ResponseCodeEnum.FAILED);
        }
    }

    @ApiOperation(value = "工程师-看板-设备信息总览")
    @GetMapping("/get-device-overview-info-for-engineer/")
    public ResponseModel<DeviceOverviewInfoModel> getDeviceOverviewInfoForEngineer(@ApiParam("areaCondition") AreaCondition areaCondition){
        try {
            AuthToken token = tokenHolder.getToken();
            String jwtStr = token.jwtString;
            DeviceOverviewInfoModel deviceOverviewInfoModel = deviceInfoService.getDeviceOverviewInfoForEngineer("Bearer " + jwtStr,areaCondition);
            return new ResponseModel<>(deviceOverviewInfoModel);
        } catch (Exception e) {
            logger.log(LogCst.MANAGEMENT_DEV_INFO, "工程师-看板-获取设备信息总览异常", e);
            return new ResponseModel<>(ResponseCodeEnum.FAILED);
        }
    }

    @ApiOperation(value = "工程师-看板-各类型设备新增量统计")
    @GetMapping("/get-device-increase/")
    public ResponseModel<List<DeviceIncreaseModel>> getDeviceIncrease(@ApiParam("startDate") @RequestParam("startDate") @DateTimeFormat(iso=DateTimeFormat.ISO.DATE_TIME) Date startDate,
                                                                      @ApiParam("endDate") @RequestParam("endDate") @DateTimeFormat(iso=DateTimeFormat.ISO.DATE_TIME) Date endDate){
        List<DeviceIncreaseModel> deviceIncreaseModel = deviceInfoService.getDeviceIncrease(startDate,endDate);
        return new ResponseModel<>(deviceIncreaseModel);
    }

    @ApiOperation(value = "query device area distribute")
    @GetMapping("/query-device-area-distribute/")
    public ResponseModel<List<DeviceAreaDistributeModel>> queryDeviceAreaDistribute() {
        return new ResponseModel<>(new ArrayList<DeviceAreaDistributeModel>());
    }

    @ApiOperation(value = "客户-看板-设备总数")
    @GetMapping("/get-monitor-device-num/")
    public ResponseModel<Integer> getMonitorDeviceNum() {
        try {
            AuthToken token = tokenHolder.getToken();
            String jwtStr = token.jwtString;
            String userId = token.getUserId();

            int count = deviceInfoService.getMonitorDeviceNum("Bearer " + jwtStr, userId, null);
            return new ResponseModel<>(count);
        }catch (Exception e) {
            logger.log(LogCst.MANAGEMENT_DEV_INFO, "获取客户-看板-设备总数异常", e);
            return new ResponseModel<>(ResponseCodeEnum.FAILED);
        }
    }

    @ApiOperation(value = "工程师-看板-设备总数")
    @GetMapping("/get-monitor-device-num-for-engineer/")
    public ResponseModel<Integer> getMonitorDeviceNumForEngineer(@ApiParam("areaCondition") AreaCondition areaCondition){
        try {
            AuthToken token = tokenHolder.getToken();
            String jwtStr = token.jwtString;
            int count = deviceInfoService.getMonitorDeviceNumForEngineer("Bearer " + jwtStr, areaCondition);
            return new ResponseModel<>(count);
        }catch (Exception e) {
            logger.log(LogCst.MANAGEMENT_DEV_INFO, "获取工程师-看板-设备总数异常", e);
            return new ResponseModel<>(ResponseCodeEnum.FAILED);
        }
    }

    @ApiOperation(value = "客户-看板-设备监控总览")
    @GetMapping("/get-overview-monitor/")
    public ResponseModel<DeviceOverviewMonitorModel> getDeviceOverviewMonitor() {
        try {
            AuthToken token = tokenHolder.getToken();
            String jwtStr = token.jwtString;
            String userId = token.getUserId();

            DeviceOverviewMonitorModel deviceOverviewMonitor = deviceInfoService.getDeviceOverviewMonitor("Bearer " + jwtStr, userId);
            return new ResponseModel<>(deviceOverviewMonitor);
        } catch (Exception e) {
            logger.log(LogCst.MANAGEMENT_DEV_INFO, "客户-看板-获取设备监控总览异常", e);
            return new ResponseModel<>(ResponseCodeEnum.FAILED);
        }
    }

    @ApiOperation(value = "客户-看板-在线比例统计")
    @GetMapping("/get-device-online-percentage/")
    public ResponseModel<PercentageStatisticsModel> getDeviceOnlinePercentage() {
        try {
            AuthToken token = tokenHolder.getToken();
            String jwtStr = token.jwtString;
            String userId = token.getUserId();
            return new ResponseModel<>(deviceInfoService.getDeviceOnlinePercentage("Bearer " + jwtStr, userId));
        } catch (Exception e) {
            logger.log(LogCst.MANAGEMENT_DEV_INFO, "客户-看板-设备在线比例统计异常", e);
            return new ResponseModel<>(ResponseCodeEnum.FAILED);
        }
    }

    @ApiOperation(value = "工程师-看板-在线比例统计")
    @GetMapping("/get-device-online-percentage-for-engineer/")
    public ResponseModel<PercentageStatisticsModel> getDeviceOnlinePercentageForEngineer() {
        return new ResponseModel<>(deviceInfoService.getDeviceOnlinePercentageForEngineer());
    }

    @ApiOperation(value = "query related device list by vpnId")
    @GetMapping("/query-relate-device-list/{vpnId}")
    public ResponseModel<List<RelateDevice>> queryRelateDeviceList(@ApiParam("vpn id") @PathVariable Long vpnId) {
        try {
            List<RelateDevice> list = deviceService.queryRelateDeviceList(vpnId);
            return new ResponseModel<>(list);
        } catch (Exception e) {
            return new ResponseModel<>(ResponseCodeEnum.FAILED);
        }
    }

    @ApiOperation(value = "设备监控列表-客户")
    @GetMapping("/query-device-monitor-other-list")
    public ResponseModel<Paging<DeviceMonitorView>> queryDeviceMonitorList(@ApiParam("deviceMonitorCondition") @Validated DeviceMonitorQueryCondition deviceMonitorCondition,
                                                                           @ApiParam("pageParam") PageParam pageParam) {
        try {
            AuthToken token = tokenHolder.getToken();
            String jwtStr = token.jwtString;
            String userId = token.getUserId();

            IPage<DeviceMonitorView> page = deviceService.queryDeviceMonitorListForPage("Bearer " + jwtStr, userId, deviceMonitorCondition, pageParam);
            Paging<DeviceMonitorView> paging = new Paging<>(page);
            return new ResponseModel<>(paging);
        } catch (Exception e) {
            logger.log(LogCst.MANAGEMENT_DEV_INFO, "获取设备监控列表-客户异常", e);
            return new ResponseModel<>(ResponseCodeEnum.FAILED);
        }
    }

    @ApiOperation(value = "设备节点图-客户")
    @GetMapping("/query-device-nodes")
    public ResponseModel<CustomerDeviceMonitorView> queryDeviceNodes(@ApiParam("deviceMonitorQueryCondition") DeviceMonitorQueryCondition deviceMonitorQueryCondition) {
        try {
            AuthToken token = tokenHolder.getToken();
            String jwtStr = token.jwtString;
            String userId = token.getUserId();

            return new ResponseModel<>(deviceService.queryDeviceMonitorList("Bearer " + jwtStr, userId,  deviceMonitorQueryCondition));
        }catch (Exception e){
            logger.log(LogCst.MANAGEMENT_DEV_INFO, "获取节点图异常", e);
            return new ResponseModel<>(ResponseCodeEnum.FAILED);
        }
    }

    @ApiOperation(value = "根据device id获取剖视图页面设备基础信息")
    @GetMapping("/get-device-info-for-section-view/{deviceId}")
    public ResponseModel<DeviceInfoForSectionView> getDeviceInfoForSectionView(@ApiParam("device id") @PathVariable Long deviceId) {
        return new ResponseModel<>(deviceService.getDeviceInfoForSectionView(deviceId));
    }

    @ApiOperation(value = "根据deviceId及收藏状态记录设备的收藏信息")
    @GetMapping("/store-device/{deviceId}/{storeStatus}/{storeType}")
    public ResponseModel<String> storeDevice(@PathVariable long deviceId, @PathVariable Integer storeStatus,@PathVariable Integer storeType){
        if(deviceStoreService.storeDevice(deviceId,storeStatus,storeType)) return new ResponseModel<>(ResponseCodeEnum.SUCCESS);
        return new ResponseModel<>(ResponseCodeEnum.FAILED);
    }

    @ApiOperation(value = "判断远程连接访问方式")
    @GetMapping("/check-method/{deviceIp}")
    public ResponseModel<String> checkHttps(@PathVariable String deviceIp){
        return new ResponseModel<>(deviceService.checkHttps(deviceIp));
    }

    @ApiOperation(value = "资源图片接口")
    @GetMapping("/get-image-resource/{deviceType}")
    public ResponseModel<String> getResourceImage(@PathVariable String deviceType) throws IOException {
        return new ResponseModel<>(deviceService.getResourceImage(deviceType));
    }
}
